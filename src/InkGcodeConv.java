import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;

public class InkGcodeConv extends JFrame {
    JFrame me = this;
    File selectedFile = null;
    ArrayList<String> lines = new ArrayList<>();
    public InkGcodeConv() {
        me.setTitle("InkGcodeConv by lpkkk");
        me.setSize(new Dimension(400,200));
        me.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        addElements();
        me.pack();
        me.setVisible(true);
    }

    private void addElements() {
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        JPanel fileSelectPanel = new JPanel();
        fileSelectPanel.add(new JLabel("File:"));
        JTextField fileField = new JTextField("");
        Dimension tfSize = new Dimension(200, 25);
        fileField.setSize(tfSize);
        fileField.setMinimumSize(tfSize);
        fileField.setPreferredSize(tfSize);
        fileSelectPanel.add(fileField);
        JButton bSelect = new JButton("Select");
        bSelect.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filterTXT = new FileNameExtensionFilter("GCODE files(txt)", "txt");
            FileNameExtensionFilter filterNGC = new FileNameExtensionFilter("GCODE files(ngc)", "ngc");
            fileChooser.setFileFilter(filterTXT);
            fileChooser.setFileFilter(filterNGC);
            int result = fileChooser.showOpenDialog(InkGcodeConv.this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile1 = fileChooser.getSelectedFile();
                // Do something with the selected file
                System.out.println("Selected file: " + selectedFile1.getAbsolutePath());
                fileField.setText(selectedFile1.getAbsolutePath());
                selectedFile = selectedFile1;
            }
        });
        fileSelectPanel.add(bSelect);
        JPanel buttonPanel = new JPanel();

        buttonPanel.add(new JLabel("Velocity:"));
        JTextField tfVelocity = new JTextField();
        tfVelocity.setText("400");
        Dimension tfVelSize = new Dimension(40, 25);
        tfVelocity.setSize(tfVelSize);
        tfVelocity.setMinimumSize(tfVelSize);
        tfVelocity.setPreferredSize(tfVelSize);
        buttonPanel.add(tfVelocity);


        JButton bConvert = new JButton("Convert");
        bConvert.addActionListener(e -> {
            try {
                BufferedReader reader = new BufferedReader(new FileReader(selectedFile.getAbsolutePath()));
                String line = reader.readLine();
                while (line != null) {
                    lines.add(line);
                    line = reader.readLine();
                }
                reader.close();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            if(lines.size() > 0){
                int i = 0;
                while (i < lines.size()){
                    if(lines.get(i).equals("G00 Z5.000000")){
                        lines.set(i,"M65P0");
                    }else if(lines.get(i).equals("G01 Z-0.125000 F100.0(Penetrate)")){
                        lines.set(i,"M62P0");
                    }else if(lines.get(i).equals("(Generated by gcodetools from Inkscape.)")){
                        lines.set(i,"(Generated by InkGcodeConv by lpkkk)");
                    }
                    if(lines.get(i).contains(" Z-0.125000")){
                        String newString = replaceString(lines.get(i), " Z-0.125000", "");
                        lines.set(i, newString);
                    }
                    if(lines.get(i).contains("F400")){
                        String newString = replaceString(lines.get(i), "F400", "F" + tfVelocity.getText().toString());
                        lines.set(i, newString);
                    }
                    i++;
                }
                String oldPath = selectedFile.getAbsolutePath();
                String newPath = oldPath + ".ready.ngc";
                saveFile(lines, newPath);
            }

        });
        buttonPanel.add(bConvert);
        mainPanel.add(fileSelectPanel);
        mainPanel.add(buttonPanel);
        me.add(mainPanel);
    }

    public static void saveFile(ArrayList<String> lines, String filePath) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            for (String line : lines) {
                writer.write(line);
                writer.newLine();
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "IO error", "Error", JOptionPane.ERROR_MESSAGE);
        }
        JOptionPane.showMessageDialog(null, "File saved.", "OK", JOptionPane.INFORMATION_MESSAGE);
    }
    public static String replaceString(String originalString, String stringToReplace, String replacementString) {
        return originalString.replace(stringToReplace, replacementString);
    }
}
